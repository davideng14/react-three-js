{"version":3,"sources":["store.js","components/Text.js","diamonds/BackfaceMaterial.js","diamonds/RefractionMaterial.js","blocks.js","diamonds/Diamonds.js","components/CustomMaterial.js","components/Plane.js","index.js"],"names":["state","sections","pages","zoom","paragraphs","offset","factor","header","image","aspect","text","diamonds","top","createRef","Text","children","size","left","right","bottom","color","opacity","height","layers","font","props","data","useLoader","FontLoader","geom","usePromise","Promise","res","TextBufferGeometry","curveSegments","onUpdate","useCallback","self","box","Vector3","geometry","computeBoundingBox","boundingBox","getSize","position","x","y","ref","useRef","last","current","useFrame","shift","lerp","scale","frustumCulled","attach","transparent","BackfaceMaterial","vertexShader","fragmentShader","side","BackSide","ShaderMaterial","RefractionMaterial","options","uniforms","envMap","value","backfaceMap","resolution","offsetContext","createContext","Block","useBlock","parentOffset","sectionHeight","undefined","curY","curTop","Provider","useThree","viewport","useContext","viewportWidth","width","viewportHeight","canvasWidth","canvasHeight","mobile","margin","contentMaxWidth","offsetFactor","dummy","Object3D","Diamonds","gltf","GLTFLoader","useMemo","scene","center","gl","camera","clock","model","ratio","getPixelRatio","envFbo","WebGLRenderTarget","backfaceFbo","texture","backfaceMaterial","refractionMaterial","forEach","i","t","getElapsedTime","s","pos","set","copy","length","rotation","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","autoClear","setRenderTarget","clearColor","render","clearDepth","material","args","__$","CustomMaterial","hasTexture","Color","this","extend","Plane","forwardRef","map","Startup","colors","Paragraph","index","w","alignRight","pixelWidth","style","textAlign","className","tabIndex","Content","images","TextureLoader","minFilter","LinearFilter","key","ReactDOM","scrollArea","onScroll","e","target","scrollTop","useEffect","concurrent","pixelRatio","orthographic","fallback","Array","fill","_","id","src","href","document","getElementById"],"mappings":"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","file":"static/js/main.9af28852.chunk.js","sourcesContent":["import { createRef } from \"react\"\nimport { Vector3 } from \"three\"\n\nconst state = {\n  sections: 3,\n  pages: 3,\n  zoom: 75,\n  paragraphs: [\n    {\n      offset: 0,\n      factor: 1.5,\n      header: \"\",\n      image: \"/exercise.jpeg\",\n      aspect: 1.35,\n      text: \"\"\n    },\n    {\n      offset: 1,\n      factor: 1.3,\n      header: \"Health and Benefits\",\n      image: \"/health.jpg\",\n      aspect: 1.35,\n      text:\n        \"test test test test\"\n    }\n  ],\n  diamonds: [],\n  top: createRef()\n}\n\nexport default state\n","import { FontLoader, Vector3, TextBufferGeometry } from \"three\"\nimport React, { useCallback, useRef } from \"react\"\nimport { useLoader, useFrame } from \"react-three-fiber\"\nimport usePromise from \"react-promise-suspense\"\nimport lerp from \"lerp\"\nimport state from \"../store\"\n\nfunction Text({ children, size = 1, left, right, top, bottom, color = \"white\", opacity = 1, height = 0.01, layers = 0, font = \"/MOONGET_Heavy.blob\", ...props }) {\n  const data = useLoader(FontLoader, font)\n  const geom = usePromise(() => new Promise(res => res(new TextBufferGeometry(children, { font: data, size: 1, height, curveSegments: 32 }))), [children])\n  const onUpdate = useCallback(\n    self => {\n      const box = new Vector3()\n      self.geometry.computeBoundingBox()\n      self.geometry.boundingBox.getSize(box)\n      self.position.x = left ? 0 : right ? -box.x : -box.x / 2\n      self.position.y = top ? 0 : bottom ? -box.y : -box.y / 2\n    },\n    [left, right, top, bottom]\n  )\n\n  const ref = useRef()\n  let last = state.top.current\n  useFrame(() => {\n    ref.current.shift = lerp(ref.current.shift, (state.top.current - last) / 100, 0.1)\n    last = state.top.current\n  })\n\n  return (\n    <group {...props} scale={[size, size, 0.1]}>\n      <mesh geometry={geom} onUpdate={onUpdate} frustumCulled={false}>\n        <customMaterial ref={ref} attach=\"material\" color={color} transparent opacity={opacity} />\n      </mesh>\n    </group>\n  )\n}\n\nconst MultilineText = ({ text, size = 1, lineHeight = 1, position = [0, 0, 0], ...props }) =>\n  text.split(\"\\n\").map((text, index) => <Text key={index} size={size} {...props} position={[position[0], position[1] - index * lineHeight, position[2]]} children={text} />)\n\nexport { Text, MultilineText }\n","import { ShaderMaterial, BackSide } from \"three\"\n\nexport default class BackfaceMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n      void main() {\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n        worldNormal = normalize(modelViewMatrix * transformedNormal).xyz;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }`,\n      fragmentShader: `varying vec3 worldNormal;\n      void main() {\n        gl_FragColor = vec4(worldNormal, 1.0);\n      }`,\n      side: BackSide\n    })\n  }\n}\n","import { ShaderMaterial } from \"three\"\n\nexport default class RefractionMaterial extends ShaderMaterial {\n  constructor(options) {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      void main() {\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n        worldNormal = normalize( modelViewMatrix * transformedNormal).xyz;\n        viewDirection = normalize((modelMatrix * vec4( position, 1.0)).xyz - cameraPosition);;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }`,\n      fragmentShader: `uniform sampler2D envMap;\n      uniform sampler2D backfaceMap;\n      uniform vec2 resolution;\n      varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      float fresnelFunc(vec3 viewDirection, vec3 worldNormal) {\n        return pow(1.05 + dot(viewDirection, worldNormal), 100.0);\n      }\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution;\n        vec3 normal = worldNormal * (1.0 - 0.7) - texture2D(backfaceMap, uv).rgb * 0.7;\n        vec4 color = texture2D(envMap, uv += refract(viewDirection, normal, 1.0/1.5).xy);\n        //gl_FragColor = vec4(mix(color.rgb, vec3(0.15), fresnelFunc(viewDirection, normal)), 1.0);\n        gl_FragColor = vec4(mix(color.rgb, vec3(0.4), fresnelFunc(viewDirection, normal)), 1.0);\n      }`,\n      uniforms: {\n        envMap: { value: options.envMap },\n        backfaceMap: { value: options.backfaceMap },\n        resolution: { value: options.resolution }\n      }\n    })\n  }\n}\n","import React, { createContext, useRef, useContext } from \"react\"\nimport { useFrame, useThree } from \"react-three-fiber\"\nimport lerp from \"lerp\"\nimport state from \"./store\"\n\nconst offsetContext = createContext(0)\n\nfunction Block({ children, offset, factor, ...props }) {\n  const { offset: parentOffset, sectionHeight } = useBlock()\n  const ref = useRef()\n  offset = offset !== undefined ? offset : parentOffset\n  useFrame(() => {\n    const curY = ref.current.position.y\n    const curTop = state.top.current\n    ref.current.position.y = lerp(curY, (curTop / state.zoom) * factor, 0.1)\n  })\n  return (\n    <offsetContext.Provider value={offset}>\n      <group {...props} position={[0, -sectionHeight * offset * factor, 0]}>\n        <group ref={ref}>{children}</group>\n      </group>\n    </offsetContext.Provider>\n  )\n}\n\nfunction useBlock() {\n  const { sections, pages, zoom } = state\n  const { size, viewport } = useThree()\n  const offset = useContext(offsetContext)\n  const viewportWidth = viewport.width\n  const viewportHeight = viewport.height\n  const canvasWidth = viewportWidth / zoom\n  const canvasHeight = viewportHeight / zoom\n  const mobile = size.width < 700\n  const margin = canvasWidth * (mobile ? 0.2 : 0.1)\n  const contentMaxWidth = canvasWidth * (mobile ? 0.8 : 0.6)\n  const sectionHeight = canvasHeight * ((pages - 1) / (sections - 1))\n  const offsetFactor = (offset + 1.0) / sections\n  return {\n    viewport,\n    offset,\n    viewportWidth,\n    viewportHeight,\n    canvasWidth,\n    canvasHeight,\n    mobile,\n    margin,\n    contentMaxWidth,\n    sectionHeight,\n    offsetFactor\n  }\n}\n\nexport { Block, useBlock }\n","import { WebGLRenderTarget, Object3D } from \"three\"\nimport React, { useRef, useMemo } from \"react\"\nimport { useLoader, useThree, useFrame } from \"react-three-fiber\"\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\nimport lerp from \"lerp\"\nimport BackfaceMaterial from \"./BackfaceMaterial\"\nimport RefractionMaterial from \"./RefractionMaterial\"\nimport { useBlock } from \"../blocks\"\nimport state from \"../store\"\n\nconst dummy = new Object3D()\nexport default function Diamonds() {\n  const gltf = useLoader(GLTFLoader, \"/diamond.glb\")\n  useMemo(() => gltf.scene.children[0].geometry.center(), [])\n\n  const { size, gl, scene, camera, clock } = useThree()\n  const { contentMaxWidth, sectionHeight, mobile } = useBlock()\n  const model = useRef()\n  const ratio = gl.getPixelRatio()\n\n  const [envFbo, backfaceFbo, backfaceMaterial, refractionMaterial] = useMemo(() => {\n    const envFbo = new WebGLRenderTarget(size.width * ratio, size.height * ratio)\n    const backfaceFbo = new WebGLRenderTarget(size.width * ratio, size.height * ratio)\n    const backfaceMaterial = new BackfaceMaterial()\n    const refractionMaterial = new RefractionMaterial({\n      envMap: envFbo.texture,\n      backfaceMap: backfaceFbo.texture,\n      resolution: [size.width * ratio, size.height * ratio]\n    })\n    return [envFbo, backfaceFbo, backfaceMaterial, refractionMaterial]\n  }, [size, ratio])\n\n  useFrame(() => {\n    state.diamonds.forEach((data, i) => {\n      const t = clock.getElapsedTime() / 2\n      const { x, offset, scale, factor } = data\n      const s = (contentMaxWidth / 35) * scale\n      data.pos.set(mobile ? 0 : x, lerp(data.pos.y, -sectionHeight * offset * factor + (state.top.current / state.zoom) * factor, 0.1), 0)\n      dummy.position.copy(data.pos)\n      if (i === state.diamonds.length - 1) dummy.rotation.set(0, t, 0)\n      else dummy.rotation.set(t, t, t)\n      dummy.scale.set(s, s, s)\n      dummy.updateMatrix()\n      model.current.setMatrixAt(i, dummy.matrix)\n      model.current.instanceMatrix.needsUpdate = true\n    })\n\n    gl.autoClear = false\n    camera.layers.set(0)\n    gl.setRenderTarget(envFbo)\n    gl.clearColor()\n    gl.render(scene, camera)\n    gl.clearDepth()\n    camera.layers.set(1)\n    model.current.material = backfaceMaterial\n    gl.setRenderTarget(backfaceFbo)\n    gl.clearDepth()\n    gl.render(scene, camera)\n    camera.layers.set(0)\n    gl.setRenderTarget(null)\n    gl.render(scene, camera)\n    gl.clearDepth()\n    camera.layers.set(1)\n    model.current.material = refractionMaterial\n    gl.render(scene, camera)\n  }, 1)\n\n  return (\n    <instancedMesh ref={model} layers={1} args={[null, null, state.diamonds.length]} position={[0, 0, 50]}>\n      <bufferGeometry attach=\"geometry\" {...gltf.__$[1].geometry} />\n    </instancedMesh>\n  )\n}\n","import { ShaderMaterial, Color } from \"three\"\nimport { extend } from \"react-three-fiber\"\n\nclass CustomMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: `uniform float scale;\n      uniform float shift;\n      varying vec2 vUv;\n      void main() {\n        vec3 pos = position;\n        pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 1.5) * 0.125);\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n      }`,\n      fragmentShader: `uniform sampler2D texture;\n      uniform float hasTexture;\n      uniform float shift;\n      uniform float scale;\n      uniform vec3 color;\n      uniform float opacity;\n      varying vec2 vUv;\n      void main() {\n        float angle = 1.55;\n        vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\n        vec2 offset = shift / 4.0 * vec2(cos(angle), sin(angle));\n        vec4 cr = texture2D(texture, p + offset);\n        vec4 cga = texture2D(texture, p);\n        vec4 cb = texture2D(texture, p - offset);\n        if (hasTexture == 1.0) gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n        else gl_FragColor = vec4(color, opacity);\n      }`,\n      uniforms: {\n        texture: { value: null },\n        hasTexture: { value: 0 },\n        scale: { value: 0 },\n        shift: { value: 0 },\n        opacity: { value: 1 },\n        color: { value: new Color(\"white\") }\n      }\n    })\n  }\n\n  set scale(value) {\n    this.uniforms.scale.value = value\n  }\n\n  get scale() {\n    return this.uniforms.scale.value\n  }\n\n  set shift(value) {\n    this.uniforms.shift.value = value\n  }\n\n  get shift() {\n    return this.uniforms.shift.value\n  }\n\n  set map(value) {\n    this.uniforms.hasTexture.value = !!value\n    this.uniforms.texture.value = value\n  }\n\n  get map() {\n    return this.uniforms.texture.value\n  }\n\n  get color() {\n    return this.uniforms.color.value\n  }\n\n  get opacity() {\n    return this.uniforms.opacity.value\n  }\n\n  set opacity(value) {\n    if (this.uniforms) this.uniforms.opacity.value = value\n  }\n}\n\nextend({ CustomMaterial })\n","import React, { forwardRef, useRef } from \"react\"\nimport { useFrame } from \"react-three-fiber\"\nimport lerp from \"lerp\"\nimport \"./CustomMaterial\"\nimport { useBlock } from \"../blocks\"\nimport state from \"../store\"\n\nconst Plane = forwardRef(({ color = \"white\", shift = 1, opacity = 1, args, map, ...props }, ref) => {\n  const { viewportHeight, offsetFactor } = useBlock()\n  const material = useRef()\n  let last = state.top.current\n  useFrame(() => {\n    const { pages, top } = state\n    material.current.scale = lerp(material.current.scale, offsetFactor - top.current / ((pages - 1) * viewportHeight), 0.1)\n    material.current.shift = lerp(material.current.shift, (top.current - last) / shift, 0.1)\n    last = top.current\n  })\n  return (\n    <mesh ref={ref} {...props}>\n      <planeBufferGeometry attach=\"geometry\" args={args} />\n      <customMaterial ref={material} attach=\"material\" color={color} map={map} transparent opacity={opacity} />\n    </mesh>\n  )\n})\n\nexport default Plane\n","import ReactDOM from \"react-dom\"\nimport React, { Suspense, useEffect, useRef, useMemo } from \"react\"\nimport { Canvas, Dom, useLoader, useFrame } from \"react-three-fiber\"\nimport { TextureLoader, LinearFilter } from \"three\"\nimport lerp from \"lerp\"\nimport { Text, MultilineText } from \"./components/Text\"\nimport Diamonds from \"./diamonds/Diamonds\"\nimport Plane from \"./components/Plane\"\nimport { Block, useBlock } from \"./blocks\"\nimport state from \"./store\"\nimport \"./styles.css\"\n\nfunction Startup() {\n  const ref = useRef()\n  useFrame(() => (ref.current.material.opacity = lerp(ref.current.material.opacity, 0, 0.025)))\n  return <Plane ref={ref} color=\"#0e0e0f\" position={[0, 0, 200]} scale={[100, 100, 1]} />\n}\n\nconst colors = ['#11b6e0', '#f48218', '#cc3399'];\n\nfunction Paragraph({ image, index, offset, factor, header, aspect, text }) {\n  const { contentMaxWidth: w, canvasWidth, margin, mobile } = useBlock()\n  const size = aspect < 1 && !mobile ? 0.65 : 1\n  const alignRight = (canvasWidth - w * size - margin) / 3\n  const pixelWidth = w * state.zoom * size\n  const left = !(index % 2)\n  const color = colors[index]\n  return (\n    <Block factor={factor} offset={offset}>\n      <group position={[left ? -alignRight : alignRight, 0, 0]}>\n        <Plane map={image} args={[1, 1, 32, 32]} shift={75} size={size} aspect={aspect} scale={[w * size, (w * size) / aspect, 1]} frustumCulled={false} />\n        <Dom\n          style={{ width: pixelWidth / (mobile ? 1 : 2), textAlign: left ? \"left\" : \"right\" }}\n          position={[left || mobile ? (-w * size) / 2 : 0, (-w * size) / 2 / aspect - 0.4, 1]}>\n          <div className=\"paragraph\" tabIndex={index}>{text}</div>\n        </Dom>\n        <Text left={left} right={!left} size={w * 0.04} color={color} top position={[((left ? -w : w) * size) / 2, (w * size) / aspect / 2 + 0.5, -1]}>\n          {header}\n        </Text>\n      </group>\n    </Block>\n  )\n}\n\nfunction Content() {\n  const images = useLoader(\n    TextureLoader,\n    state.paragraphs.map(({ image }) => image)\n  )\n  useMemo(() => images.forEach(texture => (texture.minFilter = LinearFilter)), [images])\n  const { contentMaxWidth: w, canvasWidth, canvasHeight, mobile } = useBlock()\n  return (\n    <>\n      {state.paragraphs.map((props, index) => (\n        <Paragraph key={index} index={index} {...props} image={images[index]} />\n      ))}\n      <Block factor={1.25} offset={4}>\n        <Dom className=\"bottom-left\" position={[-canvasWidth / 2, -canvasHeight / 2, 0]}>\n          Infinity Quarintine\n        </Dom>\n      </Block>\n    </>\n  )\n}\n\nfunction App() {\n  const scrollArea = useRef()\n  const onScroll = e => (state.top.current = e.target.scrollTop)\n  useEffect(() => void onScroll({ target: scrollArea.current }), [])\n  return (\n    <>\n      <Canvas className=\"canvas\" concurrent pixelRatio={1} orthographic camera={{ zoom: state.zoom, position: [0, 0, 500] }}>\n        <Suspense fallback={<Dom center className=\"loading\" children=\"Loading...\" />}>\n          <Content />\n          <Diamonds />\n          <Startup />\n        </Suspense>\n      </Canvas>\n      <div className=\"scrollArea\" ref={scrollArea} onScroll={onScroll}>\n        {new Array(state.sections).fill().map((_, index) => (\n          <div key={index} id={\"0\" + index} style={{ height: `${(state.pages / state.sections) * 100}vh` }} />\n        ))}\n      </div>\n      <div className=\"frame\">\n        <img src=\"/Logo.png\"/>\n        <div className=\"frame__links\">\n          <a className=\"frame__link\" href=\"#00\" children=\"Home\" />\n          <a className=\"frame__link\" href=\"#01\" children=\"Health\" />\n          <a className=\"frame__link\" href=\"#02\" children=\"Benefits\" />\n          <a className=\"frame__link\" href=\"#03\" children=\"Details\" />\n        </div>\n      </div>\n    </>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}